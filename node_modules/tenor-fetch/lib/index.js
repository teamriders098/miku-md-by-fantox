"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var PRODUCTION_BASE_URL = 'https://api.tenor.com/v1';
var TenorFetch = /** @class */ (function () {
    function TenorFetch(apiKey) {
        this.apiKey = apiKey;
        this.baseURL = PRODUCTION_BASE_URL;
    }
    TenorFetch.prototype.get = function (endpoint) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var searchParams = new URLSearchParams(Object.assign.apply(Object, __spreadArrays([{}], params))).toString();
        var url = this.baseURL + "/" + endpoint + "?" + searchParams;
        return fetch(url).then(function (resp) { return resp.json(); });
    };
    TenorFetch.prototype.search = function (term, options) {
        return this.get('search', { q: term }, options || {});
    };
    TenorFetch.prototype.trending = function (options) {
        return this.get('trending', options || {});
    };
    TenorFetch.prototype.categories = function (options) {
        return this.get('categories', options || {});
    };
    TenorFetch.prototype.searchSuggestions = function (term, options) {
        return this.get('search_suggestions', { q: term }, options || {});
    };
    TenorFetch.prototype.autoComplete = function (term, options) {
        return this.get('autocomplete', { q: term }, options || {});
    };
    TenorFetch.prototype.trendingSearchTerms = function (options) {
        return this.get('trending_terms', options || {});
    };
    TenorFetch.prototype.registerShare = function (id, options) {
        return this.get('registershare', options || {});
    };
    TenorFetch.prototype.gifs = function (ids, options) {
        var idsString = ids.join(',');
        return this.get('gifs', { ids: idsString }, options || {});
    };
    TenorFetch.prototype.random = function (term, options) {
        return this.get('random', { q: term }, options || {});
    };
    TenorFetch.prototype.anonymousID = function () {
        return this.get('anonid');
    };
    return TenorFetch;
}());
exports.default = TenorFetch;
