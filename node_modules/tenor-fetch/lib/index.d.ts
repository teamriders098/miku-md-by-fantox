export declare type ContentFilter = 'off' | 'low' | 'medium' | 'high';
export declare type GifFormat = 'gif' | 'mediumgif' | 'tinygif' | 'nanogif' | 'mp4' | 'loopedmp4' | 'tinymp4' | 'nanomp4' | 'webm' | 'tinywebm' | 'nanowebm';
export declare type CategoryType = 'featured' | 'emoji' | 'trending';
export interface SearchResult {
    next: string;
    results: Gif[];
}
export declare type TrendingResult = SearchResult;
export interface CategoryResult {
    tags: Tag[];
}
export interface Media {
    preview: string;
    url: string;
    dims: number[];
    size: number;
}
export interface Gif {
    created: number;
    hasaudio: boolean;
    id: string;
    media: {
        [format in GifFormat]: Media;
    };
    tags: string[];
    title: string;
    itemurl: string;
    hascaption: boolean;
    url: string;
}
export interface Tag {
    searchterm: string;
    path: string;
    image: string;
    name: string;
}
export interface SearchOptions {
    locale?: string;
    media_filter?: string;
    ar_range?: string;
    contentfilter?: ContentFilter;
    limit?: number;
    pos?: string;
    anon_id?: string;
}
export declare type TrendingOptions = SearchOptions;
export interface CategoryOptions {
    locale?: string;
    type?: CategoryType;
    contentfilter?: ContentFilter;
    anon_id?: string;
}
export interface SearchSuggestionsOptions {
    locale?: string;
    limit?: number;
    anon_id?: string;
}
export interface SearchSuggestionsResult {
    results: string[];
}
export declare type AutoCompleteOptions = SearchSuggestionsOptions;
export declare type AutoCompleteResult = SearchSuggestionsResult;
export declare type TrendingSearchTermsOptions = SearchSuggestionsOptions;
export declare type TrendingSearchTermsResult = SearchSuggestionsResult;
export interface RegisterShareOptions {
    locale?: string;
    q?: string;
    anon_id?: string;
}
export interface RegisterShareResult {
    status: string;
}
export interface GifsOptions {
    media_filter?: string;
    limit?: number;
    pos?: string;
    anon_id?: string;
}
export declare type GifsResult = SearchResult;
export interface AnonymousIDResult {
    anon_id: string;
}
export default class TenorFetch {
    private apiKey;
    baseURL: string;
    constructor(apiKey: string);
    get(endpoint: string, ...params: object[]): Promise<any>;
    search(term: string, options?: SearchOptions): Promise<SearchResult>;
    trending(options?: TrendingOptions): Promise<TrendingResult>;
    categories(options?: CategoryOptions): Promise<CategoryResult>;
    searchSuggestions(term: string, options?: SearchSuggestionsOptions): Promise<SearchSuggestionsResult>;
    autoComplete(term: string, options?: AutoCompleteOptions): Promise<AutoCompleteResult>;
    trendingSearchTerms(options?: TrendingSearchTermsOptions): Promise<TrendingSearchTermsResult>;
    registerShare(id: string, options?: RegisterShareOptions): Promise<RegisterShareResult>;
    gifs(ids: string[], options?: GifsOptions): Promise<GifsResult>;
    random(term: string, options?: SearchOptions): Promise<SearchResult>;
    anonymousID(): Promise<AnonymousIDResult>;
}
